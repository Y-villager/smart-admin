package ${packageName};

#foreach ($importClass in $importPackageList)
$importClass
#end
import net.lab1024.sa.base.common.util.SmartBeanUtil;
import net.lab1024.sa.base.common.util.SmartPageUtil;
import net.lab1024.sa.base.common.domain.ResponseDTO;
import net.lab1024.sa.base.common.domain.PageResult;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;

import org.apache.ibatis.executor.BatchResult;
import static cn.dev33.satoken.SaManager.log;

import jakarta.annotation.Resource;

import java.util.ArrayList;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;


/**
 * ${basic.description} Service
 *
 * @Author ${basic.backendAuthor}
 * @Date ${basic.backendDate}
 * @Copyright ${basic.copyright}
 */

@Service
public class ${name.upperCamel}Service {

    @Resource
    private ${name.upperCamel}Dao ${name.lowerCamel}Dao;

    /**
     * 分页查询
     *
     * @param queryForm
     * @return
     */
    public PageResult<${name.upperCamel}VO> queryPage(${name.upperCamel}QueryForm queryForm) {
        Page<?> page = SmartPageUtil.convert2PageQuery(queryForm);
        List<${name.upperCamel}VO> list = ${name.lowerCamel}Dao.queryPage(page, queryForm);
        PageResult<${name.upperCamel}VO> pageResult = SmartPageUtil.convert2PageResult(page, list);
        return pageResult;
    }

#if($insertAndUpdate.isSupportInsertAndUpdate)
    /**
     * 添加
     */
    public ResponseDTO<String> add(${name.upperCamel}AddForm addForm) {
        ${name.upperCamel}Entity ${name.lowerCamel}Entity = SmartBeanUtil.copy(addForm, ${name.upperCamel}Entity.class);
        ${name.lowerCamel}Dao.insert(${name.lowerCamel}Entity);
        return ResponseDTO.ok();
    }

    /**
     * 更新
     *
     * @param updateForm
     * @return
     */
    public ResponseDTO<String> update(${name.upperCamel}UpdateForm updateForm) {
        ${name.upperCamel}Entity ${name.lowerCamel}Entity = SmartBeanUtil.copy(updateForm, ${name.upperCamel}Entity.class);
        ${name.lowerCamel}Dao.updateById(${name.lowerCamel}Entity);
        return ResponseDTO.ok();
    }
#end

#if($deleteInfo.isSupportDelete)
    #if($deleteInfo.deleteEnum == "Batch" || $deleteInfo.deleteEnum == "SingleAndBatch")
    /**
     * 批量删除
     *
     * @param idList
     * @return
     */
    public ResponseDTO<String> batchDelete(List<${primaryKeyJavaType}> idList) {
        if (CollectionUtils.isEmpty(idList)){
            return ResponseDTO.ok();
        }

### 真删除 or 假删除
#if(!${deleteInfo.isPhysicallyDeleted})
        ${name.lowerCamel}Dao.batchUpdateDeleted(idList, true);
#else
        ${name.lowerCamel}Dao.deleteBatchIds(idList);
#end
        return ResponseDTO.ok();
    }
    #end

    #if($deleteInfo.deleteEnum == "Single" || $deleteInfo.deleteEnum == "SingleAndBatch")
    /**
     * 单个删除
     */
    public ResponseDTO<String> delete(${primaryKeyJavaType} ${primaryKeyFieldName}) {
        if (null == ${primaryKeyFieldName}){
            return ResponseDTO.ok();
        }

### 真删除 or 假删除
#if(!${deleteInfo.isPhysicallyDeleted})
        ${name.lowerCamel}Dao.updateDeleted(${primaryKeyFieldName}, true);
#end
#if(${deleteInfo.isPhysicallyDeleted})
        ${name.lowerCamel}Dao.deleteById(${primaryKeyFieldName});
#end
        return ResponseDTO.ok();
    }
    #end
#end

    /**
     * 导入
     *
     * @param file 上传文件
     * @return 结果
     */
    public ResponseDTO<String> import${name.upperCamel}(MultipartFile file, Boolean mode) {
        List<${name.upperCamel}ImportForm> dataList;
        List<${name.upperCamel}ImportForm> failedDataList = new ArrayList<>();

        try {
            dataList = EasyExcel.read(file.getInputStream()).head(${name.upperCamel}ImportForm.class)
                    .sheet()
                    .doReadSync();
        } catch (IOException e) {
            log.error(e.getMessage(), e);
            throw new BusinessException("数据格式存在问题，无法读取");
        }

        if (CollectionUtils.isEmpty(dataList)) {
            return ResponseDTO.userErrorParam("数据为空");
        }

        // 将 ${name.upperCamel}ImportForm 转换为 ${name.upperCamel}Entity，同时记录失败的数据
        List<${name.upperCamel}Entity> entityList = createImportList(dataList, failedDataList, mode);
        // true 为追加模式，false为按单据编号覆盖
        int successTotal = 0;
        try {
            if (mode) {  // 追加
                // 批量插入操作
                List<BatchResult> insert = ${name.lowerCamel}Dao.insert(entityList);
                for (BatchResult batchResult : insert) {
                    successTotal += batchResult.getParameterObjects().size();
                }
            } else {  // 覆盖
                // 执行批量更新操作
                successTotal = doThreadUpdate(entityList);
            }
        }
        catch (DataAccessException e) {
            // 捕获数据库访问异常
            return ResponseDTO.error(SystemErrorCode.SYSTEM_ERROR, "数据库操作失败，更新或插入过程中出现异常："+e.getMessage());
        } catch (Exception e) {
            // 捕获其他异常
            return ResponseDTO.error(SystemErrorCode.SYSTEM_ERROR, "发生未知错误："+e.getMessage());
        }

        String failed_data_path=null;
        if (!failedDataList.isEmpty()) {
            // 创建并保存失败的数据文件
            failed_data_path = ExcelUtils.saveFailedDataToExcel(failedDataList, ${name.upperCamel}ImportForm.class);
        }

        // 如果有失败的数据，导出失败记录到 Excel
        return ResponseDTO.okMsg("总共"+dataList.size()+"条数据，成功导入" + successTotal + "条，导入失败记录有："+failedDataList.size()+"条", failed_data_path );

    }

    // 生成导入列表
    private List<${name.upperCamel}Entity> createImportList(List<${name.upperCamel}ImportForm> dataList,
                                                     List<${name.upperCamel}ImportForm> failedDataList,
                                                     boolean mode) {
    ##    Set<String> billNos = new HashSet<>();
    
        for (${name.upperCamel}ImportForm form : dataList) {
    ##        billNos.add(form.getBillNo());
        }
        // 单据编号 map
##        List<${name.upperCamel}VO> ${name.loweCamel}VOList = receivablesDao.queryByBillNos(billNos);
##        Map<String, Integer> receivablesMap = receivablesVOList
##                .stream().filter(Objects::nonNull)
##                .collect(Collectors.toMap(${name.upperCamel}VO::getBillNo, ${name.upperCamel}VO::get${name.upperCamel}Id));
    
        // 需要的映射数据
    ##    Map<String, Long> customerMap = customerService.queryByCustomerNames(customerNames);
    
        return dataList.parallelStream()
                .map(form -> convertToEntity(form, failedDataList, mode))
                .filter(Objects::nonNull)
                .toList();
    
    }

    // 将 ${name.upperCamel}ImportForm 转换为 ${name.upperCamel}Entity
    private ${name.upperCamel}Entity convertToEntity(${name.upperCamel}ImportForm form,
                                                     List<${name.upperCamel}ImportForm> failedDataList,
                                                     boolean mode) {
        ${name.upperCamel}Entity entity = new ${name.upperCamel}Entity();


    #foreach($field in ${fields} )
  //      entity.set${field.fieldName}(form.get${field.fieldName}());
    #end

        return entity;
    }

    /**
     * 导出
     * 需要修改
     */
    public List<${name.upperCamel}VO> export${name.upperCamel}(${name.upperCamel}QueryForm queryForm) {
        //List<${name.upperCamel}VO> entityList = ${name.lowerCamel}Dao.selectList(null);
        List<${name.upperCamel}VO> entityList = ${name.lowerCamel}Dao.queryPage(null,queryForm);
//        return entityList.stream()
//                .map(e ->
//                        ${name.upperCamel}VO.builder()
//                                .build()
//                )
//                .collect(Collectors.toList());
        return null;

    }

    private int doThreadUpdate(List<${name.upperCamel}Entity> entityList) {
        List<${name.upperCamel}Entity> updateList = new ArrayList<>();
        // 初始化线程池
        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), 50,
                4, TimeUnit.SECONDS, new ArrayBlockingQueue<>(10),
                new ThreadPoolExecutor.CallerRunsPolicy());
        // 将大集合拆分成N个小集合，使用多线程操作数据
        List<List<${name.upperCamel}Entity>> splitList = SplitListUtils.splitList(entityList, 1000);
        // 记录单个任务的执行次数
        CountDownLatch countDownLatch = new CountDownLatch(splitList.size());
        for (List<${name.upperCamel}Entity> subList : splitList) {
            threadPool.execute(new Thread(new Runnable() {
                @Override
                public void run() {
                    System.out.println("当前线程："+ Thread.currentThread().getName());
                    //${name.lowerCamel}Dao.update${name.upperCamel}ByBillNo(subList);
                    countDownLatch.countDown();
                }
            }));
        }
        try {
            // 让当前线程处于阻塞状态，知道锁存器计数为零
            countDownLatch.await();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        return 0;
    }
}
